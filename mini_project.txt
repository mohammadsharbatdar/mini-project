#include "header.h"

lesson Lesson;

vector<teacher> admin::Teacher;

vector<student> admin::Student;

vector<string> admin::homework;

vector<string> admin::notification;

void teacher::create_lesson(string Name, int Capacity, int Partical_Uniit, int Theory_Unit, int Classroom_Number, string Classroom_Time, string Teacher_Name) {

Name Name + " : " + Teacher_Name;

Lesson.Lessons_List.push_back(Name);

Lesson.Lessons_Capacity.push_back(Capacity);

Lesson.partical_unit.push_back(Partical_Unit);

Lesson.theory_unit.push_back(Theory_Unit);

Lesson.classroom_number.push_back(Classroom_Number);

Lesson.classroom_time.push_back(Classroom_Time);

ofstream file("lesson.txt");

file << "Units:\n";

for(int i = 0; i < Lesson.Lessons_List.size(); i++)
{

file << "partical unit:\t" << Lesson.partical_unit[i] << "\ttheory unit:\t" << Lesson.theory_unit[i] << "\n";

}

file << "\nclassroom numbers:\n";

for(int i = 0; i < Lesson.Lessons_List.size(); i++)
{

file << Lesson.classroom_number[i] << "\n";

}

file << "\nclassroom times:\n";

for(int i = 0; i < Lesson.Lessons_List.size(); i++)
{

file << Lesson.classroom_time[i] << "\n";

}

file << "\nattendance list:\n";

for(int i = 0; i < Lesson.Lessons_List.size(); i++)
{

file << "present:\t" << Lesson.present_list[i] << "\tabsent:\t" << Lesson.absent_list[i] << "\n"; 

}

file.close();

}

void teacher::putting_homework(string lesson, string duty) {

int andis = 0;

for(string i : Lesson.Lessons_List)
{

if(i.compare(lesson) == 0)
{

break;

}

andis++;

}

homework[andis] = duty;

}

void teacher::putting_notification(string lesson, string note) 
{

int andis = 0;

for(string i : Lesson.Lessons_List)
{

if(i.compare(lesson) == 0)
{

break;

}

andis++;

}

notification.push_back(note);

}

void teacher::puttinh_attendance(string lesson)
{

int Present_Number;

int Absent_Number;

int andis = 0;

for(string i : Lesson.Lessons_List)
{

if(i.compare(lesson) == 0)
{

break;

}

andis++;

}

for(string i : Lesson.Students_List[andis])
{

cout << "please enter present_number for the student:" << endl;

cin >> Present_Number;

cout << "please enter absent_number for the student:" << endl;

cin >> Absent_Number;

}

}

void Create_Lesson(string Name, int Capacity, int Partical_Unit, int Theeory_Unit, int Classroom_Number, string Classroom_Time, string Teacher_Name)
{

teacher Teacher;

Teacher.create_lesson(string Name, int Capacity, int Partical_Unit, int Theeory_Unit, int Classroom_Number, string Classroom_Time, string Teacher_Name);

}

void Putting_Homework(string lesson, string duty)
{

teacher Teacher;

Teacher.putting_homework(lesson, duty);

}

void Putting_Notification(string lesson, string note)
{

teacher Teacher;

Teacher.putting_notification(lesson, note);

}

void Putting_Score(string lesson)
{

int andis = 0;

int Score;

for(string i : Lesson.Lessons_List)
{

if(i.compare(lesson) == 0)
{

break;

}

andis++;

}

for(int k = 0; k < Lesson.Students_List[andis].size(); k++)
{

cout << "please enter a score:" << endl;

cin >> Score;

Lesson.teacher_put_score[andis].push_back(Score);

}

}

void Putting_Attendance(string lesson)
{

teacher Teacher;

Teacher.putting_attendance(lesson);

}

void student::add_lesson(string lesson, string Name)
{

int andis = 0;

for(string i : Lesson.Lessons_List)
{

if(i.compare(lesson) == 0)
{

break;

}

andis++;

}

Lesson.Students_List[andis].push_back(Name);

}

void Add_Lesson(string Lesson, stringname)
{

student Student;

Student.add_lesson(Lesson, Name);

}

void 
