#include <iostream>
#include <string>
#include <vector>
#include <fstream>
using namespace std;

class lesson {

public:

vector<string> Lesson_List;

vector<string> Teachers_List;

vector<string> Student_file;

vector<string> classroom_time;

vector<vector<string>> Students_List;

vector<vector<int>> teacher_put_score;

vector<int> student_put_score;

vector<int> Lessons_Capacity;

vector<int> classroom_number;

vector<int> partical_unit;

vector<int> theory_unit;

vector<int> present_list;

vector<int> absent_list;

~lesson()
{}

};

lesson Lesson;

class teacher {

private:

static void create_lesson(string Name, int Capacity, int Partical_Unit, int Theory_Unit, int Classroom_Name, string Classroom_Time, string Theacher_Name)
{

Name = Name + " : " + Theacher_Name;

Lesson.Lessons_List.push_back(Name);

Lesson.Lessons_Capacity.push_back(Capacity);

Lesson.partical_unit.push_back(Partical_Unit);

Lesson.theory_unit.push_back(Theory_Unit);

Lesson.classroom_number.push_back(Classroom_Number);

Lesson.classroom_time.push_back(Classroom_Time);

ofstream file("lesson.txt");

file << "Units:\n";

for(int i = 0; i < Lesson.Lessons_List.size(); i++)
{

file << "partical unit:\t";

file << LEsson.partical_unit[i];

file << "\t theory unit:\t";

file << Lesson.theory_unit[i];

file << "\n";

}

file << "\n";

file << "classroom numbers:\n";

for(inti = 0; i < Lesson.Lessons_List.size(); i++)
{

file << Lesson.classroom_number[i];

file << "\n";

}

file << "\n";

file << "classroom time:\n";

for(int i = 0; i < Lesson.Lessons_List.size(); i++)
{

file << Lesson.classroom_time[i];

file << "\n";

file << "attendance list:\n";

for(int i = 0; i < Lesson.Lessons_List.size(); i++)
{

file << "present:\n";

file << Lesson.present_list[i];

file << "\tabsent:\t";

file << Lesson.absent_List[i];

file << "\n";

}

file << "\n";

file.close();

}

static void putting_homework(string lesson, string duty)
{

int andis = 0;

for(string i: Lesson.Lessons_List)
{

if(i.compare(lesson) == 0)
{

break;

}

andis++;

}

homework[andis] = duty;

}

public:

bool teacher_position = true;

static vector<string> homework;

static vector<string> notification;

friend void Create_Lesson(string Name, int Capacity, int Partical_Unit, int Theory_Unit, int Classroom_Number, string Classroom_Time, string teacher_name);

friend void Putting_Homework(string lesson, string duty);

~teacher()
{}

};

vector<string> teacher::homework;

vector<string> teacher::notification;

void Create_Lesson(string Name, int Capacity, int Partical_Unit, int Theory_Unit, int Classroom_Number, string Classroom_Time, string Teacher_Name)
{

teacher Teacher;

Teacher.create_lesson(Name, Capacity, Partical_Unit, Theory_Unit, Classroom_Number, Classroom_Time, Teacher_Name);

}

void Putting_Homework(string lesson, string duty)
{

teacher Teacher;
Teacher.putting_homework(lesson, duty);

}

class student:public teacher {

~student()
{}

};

class admin {

private:

static void create_user(int choice)
{

if(choice == 1)
{

Teacher.push_back(teacher());

}
else if(choice == 2)
{

Student.push_back(student());

}

}

static void update()
{

ofstream file("main.txt");

file << "Lessons_List:\n";

}

file << "\n";

file << "Teachers_List:\n";

for(string i: Lesson.Teachers_List)
{

file << i;

}

file << "\n";

ofstream file_1("teacher.txt");

for()
{

file_1 << i;

}

file_1.close();

file << "Students_Score:\n";

for(int i: Lesson.student_put_score)
{

file << i << "\t";

}

file << "\n";

int andis = 0;

file << "Teachers_Score:\n";

for(vector<int> i: Lesson.teacher_put_score)
{

file << Lesson.Lessons_List[andis] << "\t:\t";

for(int j: i)
{

file << j << "\t";

}

file << "\n";

andis++;

}

andis = 0;

file << "\n";

ofstream file_2("student.txt");

for(vector<string> i: Lesson.Students_list)
{

file_2 << Lesson.Lesson_List[andis] << "\t:\t";

for(string j: i)
{

file_2 << j;

}

file_2.close();

file << "\n";

andis++;

}

file.close();

}

static void delete_user(string user, string Name)
{

if(user.compare("teacher") == 0)
{

int andis = 0;

for(string i: Lesson.Teachers_List)
{

if(i.compare(Name) == 0)
{

break;

}

andis++;

}

Teacher.erase(Teacher.begin() + andis);

Lesson.Teachers_List.erase(Lesson.Teachers_List.begin() + andis);

}
else if(user.compare("student") == 0)
{

int row = 0;

int colum;

for(vector<string> i: Lesson.Students_List)
{

colum = 0;

for(string j: i)
{

if(j.compare(Name) == 0)
{

goto line 754;

}

colum++;

}

row++;

}

line754:

Student.erase(Student.begin() + ((row + 1) * (colum + 1)) - 1);

Lesson.Students_List[row].erase(Lesson.Students_List[row].begin() + colum);

}

}

static void restore(string user, string Name)
{

if(user.compare("teacher") == 0)
{

int andis = 0;

for(string i: Lesson.Teachers_List)
{

if(i.compare(Name) == 0)
{

break;

}

andis++;

}

Teacher[andis].teacher_position = false;

}

else if(user.compare("student") == 0)
{

int row = 0;

int colum;

for(vector<string> i: Lesson.Students_List)
{

colum = 0;

for(string j: i)
{

if(j.compare(Name) == 0)
{

goto line820;

}

colum++;

}

row++;

}

line820:

Student[((row + 1) * (colum + 1)) - 1].student_position = false;

}

}

static void read()
{

ifstream file("main.txt");

string line;

while(getline(file, line))
{

cout << line << endl;

}

file.close();

}

public:

static vector<teacher> Teacher;

static vector<student> Student;

friend void Create_User(int choice, string Name, string Password);

friend void Update();

friend void Delete(string user, string Name);

friend void Restore(string user, string Name);

friend void Read();

~admin()
{}

};

vector<teacher> admin::Teacher;

vector<student> admin::Student;

void Create_User(int choice, string Name = "Hello", string Password = "Hello")
{

admin Admin;

Admin.create_user(choice);

if(Name.compare("Hello") != 0 && choice == 1)
{

Lesson.Teachers_List.push_back(Name);

Lesson.Teachers_List.push_back("\n");

if(Password.compare("Hello") != 0)
{

Lesson.Teachers_List.push_back(Password);

Lesson.Teachers_List.push_back("\n");

}

}
else if(Name.compare("Hello") != 0 && choice == 2)
{

Lesson.Student_file.push_back(Name);

Lesson.Student_file.push_back("\n");

if(Password.compare("Hello") != 0)
{

Lesson.Student_file.push_back(Password);

Lesson.Student_file.push_back("\n");

}

}

}

void Update()
{

admin Admin;

Admin.update();

}

void Delete(string user, string Name)
{

admin Admin;

Admin.delete_user(user, Name);

}

void Restore(string user, string name)
{

admin Admin;
Admin.restore(user,Name);

}

void Read()
{

admin Admin;

Admin.read();

}

int main()
{


return 0;
}
